{"version":3,"sources":["Components/Cards.tsx","Components/Header.tsx","Components/Gameboard.tsx","App.tsx","index.tsx"],"names":["Cards","props","array","i","length","j","Math","floor","random","temp","shuffleArray","list","handleClick","e","onClick","currentTarget","id","className","map","char","toString","src","image","alt","name","Header","level","score","bestScore","Gameboard","useState","setScore","setBestScore","setLevel","characters","setCharacters","setList","selected","setSelected","playing","setPlaying","useEffect","GetAnimeCharacter","filterCharacters","prevLevel","a","fetch","then","res","json","info","formatFetch","character","input","image_url","mal_id","handleStartGame","clearScore","shuffled","sort","choices","slice","handleChoice","includes","prevScore","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.308fb09e.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\nconst Cards: FC<Prop> = (props) => {\n  // shuffle cards every time one of them is selected\n  const shuffleArray = (array: Array<Info>) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  shuffleArray(props.list);\n\n  const handleClick: (\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>\n  ) => void = (e) => {\n    props.onClick(e.currentTarget.id);\n  };\n  return (\n    <div className=\"card-list\">\n      {props.list.map((char) => {\n        return (\n          <div\n            key={char.id}\n            id={char.id.toString()}\n            className=\"card-container\"\n            onClick={handleClick}\n          >\n            <img src={char.image} alt={char.name} />\n            <h4>{char.name}</h4>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\ninterface Prop {\n  list: Info[];\n  onClick: (input: string) => void;\n}\n\ninterface Info {\n  image: string;\n  id: number;\n  name: string;\n}\n\nexport default Cards;\n","import React, { FC } from 'react';\n\nconst Header: FC<Props> = (props) => {\n  return (\n    <header>\n      <div className=\"level\">\n        <h2>Level: {props.level}</h2>\n      </div>\n      <div className=\"score-container\">\n        <div className=\"score\">Score: {props.score}</div>\n        <div className=\"best-score\">Best Score: {props.bestScore}</div>\n      </div>\n    </header>\n  );\n};\n\ninterface Props {\n  score: number;\n  bestScore: number;\n  level: number;\n}\n\nexport default Header;\n","import React, { FC, useEffect, useState } from 'react';\nimport Cards from './Cards';\nimport Header from './Header';\n\nconst Gameboard: FC = () => {\n  const [score, setScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const [level, setLevel] = useState(1);\n  const [characters, setCharacters] = useState<Array<Info>>([]);\n  const [list, setList] = useState<Array<Info>>([]);\n  const [selected, setSelected] = useState<Array<String>>([]);\n  const [playing, setPlaying] = useState(false);\n\n  useEffect(() => {\n    GetAnimeCharacter();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setSelected([]);\n    filterCharacters(characters);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [level]);\n\n  useEffect(() => {\n    if (list.length && list.length === selected.length) {\n      setLevel((prevLevel) => prevLevel + 1);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selected]);\n\n  // Fetch data from API\n  const GetAnimeCharacter = async () => {\n    const character = await fetch(\n      'https://api.jikan.moe/v3/anime/40028/characters_staff'\n    )\n      .then((res) => res.json())\n      .then((res) => res.characters.map((info: any) => formatFetch(info)));\n\n    setCharacters(character);\n    filterCharacters(character);\n  };\n\n  //Filter the data from API\n  const formatFetch = (input: any): Info => {\n    return {\n      image: input.image_url,\n      id: input.mal_id,\n      name: input.name,\n    };\n  };\n\n  const handleStartGame = () => {\n    clearScore();\n    setPlaying(true);\n  };\n\n  //Set number of characters based on level\n  const filterCharacters = (character: Info[]) => {\n    const shuffled = character.sort(() => 0.5 - Math.random());\n\n    const choices = level * 4;\n\n    setList(shuffled.slice(0, choices));\n  };\n\n  // Handle Scores\n  const handleScore = () => {\n    setScore((prevScore) => prevScore + 1);\n  };\n\n  const handleBestScore = () => {\n    if (score > bestScore) {\n      setBestScore(score);\n    }\n  };\n\n  //Handle players choices\n  const handleChoice = (input: string) => {\n    if (!selected.includes(input)) {\n      setSelected([...selected, input]);\n      handleScore();\n    } else {\n      handleBestScore();\n      setPlaying(false);\n    }\n  };\n\n  const clearScore = () => {\n    setScore(0);\n    setLevel(1);\n    setSelected([]);\n  };\n\n  if (score === 35) {\n    <div className=\"start-container\">\n      <div className=\"button-container\">\n        <h1>YOU WON!!!!</h1>\n        <button onClick={handleStartGame}>Restart Game</button>\n      </div>\n    </div>;\n  }\n\n  if (!playing && score) {\n    return (\n      <div className=\"start-container\">\n        <div className=\"button-container\">\n          <h1>You Lost</h1>\n          <h3>Your Score: {score}</h3>\n          <h3>Level: {level}</h3>\n          <button onClick={handleStartGame}>Restart Game</button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!playing) {\n    return (\n      <div className=\"start-container\">\n        <div className=\"button-container\">\n          <h1>Start Game</h1>\n          <ul>\n            Game Rules:\n            <li>Pick a card only once</li>\n            <li>When you pick all cards, you go to the next level</li>\n            <li>If you choose the same card twice, you lose</li>\n          </ul>\n          <button onClick={handleStartGame}>Start Game</button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <main>\n      <Header level={level} score={score} bestScore={bestScore} />\n      <Cards list={list} onClick={(input: string) => handleChoice(input)} />\n    </main>\n  );\n};\n\ninterface Info {\n  image: string;\n  id: number;\n  name: string;\n}\n\nexport default Gameboard;\n","import React from 'react';\nimport './App.scss';\nimport Gameboard from './Components/Gameboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Gameboard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}